{"ast":null,"code":"var _jsxFileName = \"/home/cristian/Documentos/ProyectosGIT/sietelotos-fd/src/components/ResultSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ResultSearchProduct from './ResultSearchProduct';\nimport { postearGetEntity } from \"./AdminPanel/FetchFunctions\";\nimport '../styles/ResultSearchProduct.css';\n\nconst ResultSearch = () => {\n  _s();\n\n  const [products, setProductos] = useState([]);\n  let {\n    textsearch\n  } = useParams();\n\n  const textoBusqueda = () => {\n    if (products.length > 0) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        id: \"googleFont\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, \"Resultado de b\\xFAsqueda para \\\"\", textsearch, \"\\\"\");\n    } else {\n      if (products.length === 0) {\n        return /*#__PURE__*/React.createElement(\"h2\", {\n          id: \"googleFont noResultado\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 15\n          }\n        }, \"\\xA1No existen resultados para la b\\xFAsqueda!\");\n      } else {\n        console.log(textsearch);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"preloader-wrapper active\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"spinner-layer spinner-red-only\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"circle-clipper left\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"circle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"gap-patch\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"circle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"circle-clipper right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"circle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }\n        }))));\n      }\n    }\n  };\n\n  const productsSetter = result => {\n    setProductos(result.Products);\n  };\n\n  useEffect(() => {\n    postearGetEntity({\n      entityClass: `products/search?text=${textsearch}`,\n      fx: productsSetter\n    });\n  }, [textsearch]);\n  console.log(products);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, products.length !== 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, textoBusqueda(), /*#__PURE__*/React.createElement(ResultSearchProduct, {\n    products: products,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })) : textoBusqueda());\n};\n\n_s(ResultSearch, \"iFn1A5EIKUe+aWz49i4W0n2ETPI=\", false, function () {\n  return [useParams];\n});\n\n_c = ResultSearch;\nexport default ResultSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultSearch\");","map":{"version":3,"sources":["/home/cristian/Documentos/ProyectosGIT/sietelotos-fd/src/components/ResultSearch.js"],"names":["React","useState","useEffect","useParams","ResultSearchProduct","postearGetEntity","ResultSearch","products","setProductos","textsearch","textoBusqueda","length","console","log","productsSetter","result","Products","entityClass","fx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAO,mCAAP;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAM,CAACC,QAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAC,EAAD,CAAzC;AACA,MAAI;AAACQ,IAAAA;AAAD,MAAeN,SAAS,EAA5B;;AAEA,QAAMO,aAAa,GAAG,MAAM;AACxB,QAAGH,QAAQ,CAACI,MAAT,GAAkB,CAArB,EAAuB;AACnB,0BACI;AAAI,QAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC+BF,UAD/B,OADJ;AAKH,KAND,MAMK;AACH,UAAGF,QAAQ,CAACI,MAAT,KAAoB,CAAvB,EAAyB;AACvB,4BACE;AAAI,UAAA,EAAE,EAAC,wBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADF;AAID,OALD,MAKK;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,4BACE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,eAGQ;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADI,CAHR,eAKQ;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACJ;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADI,CALR,CADF,CADF;AAaD;AACF;AACJ,GA9BD;;AAgCA,QAAMK,cAAc,GAAIC,MAAD,IAAY;AACjCP,IAAAA,YAAY,CAACO,MAAM,CAACC,QAAR,CAAZ;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,gBAAgB,CAAC;AAAEY,MAAAA,WAAW,EAAG,wBAAuBR,UAAW,EAAlD;AAAqDS,MAAAA,EAAE,EAAEJ;AAAzD,KAAD,CAAhB;AACC,GAFM,EAEJ,CAACL,UAAD,CAFI,CAAT;AAIEG,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACF,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,QAAQ,CAACI,MAAT,KAAoB,CAApB,gBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCD,aAAa,EADd,eAEA,oBAAC,mBAAD;AAAqB,IAAA,QAAQ,EAAEH,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADC,GAKDG,aAAa,EANjB,CADJ;AAUH,CAxDD;;GAAMJ,Y;UAGiBH,S;;;KAHjBG,Y;AA0DN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport ResultSearchProduct from './ResultSearchProduct'\nimport { postearGetEntity } from \"./AdminPanel/FetchFunctions\";\nimport '../styles/ResultSearchProduct.css'\n\nconst ResultSearch = () => {\n\n    const [products, setProductos] = useState([]) \n    let {textsearch} = useParams()\n    \n    const textoBusqueda = () => {\n        if(products.length > 0){\n            return (\n                <h2 id=\"googleFont\">\n                  Resultado de búsqueda para \"{textsearch}\" \n                </h2>\n            )\n        }else{\n          if(products.length === 0){\n            return(\n              <h2 id=\"googleFont noResultado\">\n                ¡No existen resultados para la búsqueda! \n              </h2>)\n          }else{\n            console.log(textsearch)\n            return (\n              <div className=\"preloader-wrapper active\">\n                <div className=\"spinner-layer spinner-red-only\">\n                  <div className=\"circle-clipper left\">\n                    <div className=\"circle\"></div>\n                  </div><div className=\"gap-patch\">\n                    <div className=\"circle\"></div>\n                  </div><div className=\"circle-clipper right\">\n                    <div className=\"circle\"></div>\n                  </div>\n                </div>\n              </div>\n            )\n          }\n        }\n    }\n\n    const productsSetter = (result) => {\n      setProductos(result.Products)\n    }\n\n    useEffect(() => {  \n      postearGetEntity({ entityClass: `products/search?text=${textsearch}`, fx: productsSetter });\n      }, [textsearch]);\n\n      console.log(products)\n    return (\n        <div>\n            {products.length !== 0 ?\n            <div>\n            {textoBusqueda()}\n            <ResultSearchProduct products={products}/>\n            </div>\n          : textoBusqueda()}\n        </div>\n    )\n}\n\nexport default ResultSearch;"]},"metadata":{},"sourceType":"module"}